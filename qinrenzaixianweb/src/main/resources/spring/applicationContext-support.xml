<?xml version="1.0" encoding="UTF-8"?>  
<beans  
    xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:context="http://www.springframework.org/schema/context"    
    xmlns:mvc="http://www.springframework.org/schema/mvc"    
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd  
    http://www.springframework.org/schema/tx   
    http://www.springframework.org/schema/tx/spring-tx-4.1.xsd  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/mvc  
    http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd"> 
    <!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
    <!-- <bean class="com.xxl.app.base.SpringContextHolder" lazy-init="false" /> -->
    
    <!-- 使用annotation注解方式配置事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
     
    <!-- 使用JDBC事务 -->  
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />
    </bean>
     <!-- 引入配置文件 -->
    <context:property-placeholder location="classpath*:jdbc.properties"  ignore-unresolvable="true"/>
    <!--创建jdbc数据源 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
        <property name="driverClassName">
	           <value>${jdbc.driver}</value>
	    </property>
	    <property name="url">
	           <value>${jdbc.url}</value>
	    </property>
	    <property name="username">
	            <value>${jdbc.username}</value>
	    </property>
	    <property name="password">
	            <value>${jdbc.password}</value>
	    </property>
    </bean>
     <!-- 开启自动注入-->
    <context:annotation-config />  
    <!-- 开启自动扫描，在指定的路劲及子路径下扫描，将扫描到的的bean 注册到spring的bean中 --> 
    <context:component-scan base-package="com.qinrenzaixian.web" />
    
    <!-- 配置SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:/spring/spring-mybatis.xml"/>
        <!-- 实体类映射文件路径-->
        <property name="mapperLocations" value="classpath*:com/qinrenzaixian/web/domain/*mapper.xml"/>
    </bean>
    <!-- 配置sqlsession 产生这个实例就是通过 sqlsessionTemplate来实现的 -->    
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	    <constructor-arg index="0">
	       <ref  bean="sqlSessionFactory"/>
	    </constructor-arg>
    </bean>
    
      <!-- 业务类 的配置 -->
    <bean id="userDaoSupportImp"  class="com.qinrenzaixian.web.dao.UserDaoSupportDaoImpl">
      <!--注入SqlSessionTemplate实例 -->  
      <property name="sqlSessionTemplate"  ref="sqlSession" />
      <!--也可直接注入SqlSessionFactory实例，二者都指定时，SqlSessionFactory失效 -->  
      <!-- <property name="sqlSessionFactory" ref="sqlSessionFactory" />  --> 

    </bean>
</beans>