<?xml version="1.0" encoding="UTF-8"?>  
<beans  
    xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:context="http://www.springframework.org/schema/context"    
    xmlns:mvc="http://www.springframework.org/schema/mvc"    
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd  
    http://www.springframework.org/schema/tx   
    http://www.springframework.org/schema/tx/spring-tx-4.1.xsd  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/mvc  
    http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd"> 
    <!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
    <!-- <bean class="com.xxl.app.base.SpringContextHolder" lazy-init="false" /> -->
    
    <!-- 使用annotation注解方式配置事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
     <!-- 开启自动扫描，在指定的路劲及子路径下扫描，将扫描到的的bean 注册到spring的bean中 --> 
     <context:component-scan base-package="com.qinrenzaixian.web.mapper" />
    <!-- 使用JDBC事务 -->  
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />
    </bean>
     <!-- 引入配置文件 -->
    <context:property-placeholder location="classpath*:jdbc.properties"  ignore-unresolvable="true"/>
    <!--创建jdbc数据源 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
        <property name="driverClassName">
	           <value>${jdbc.driver}</value>
	    </property>
	    <property name="url">
	           <value>${jdbc.url}</value>
	    </property>
	    <property name="username">
	            <value>${jdbc.username}</value>
	    </property>
	    <property name="password">
	            <value>${jdbc.password}</value>
	    </property>
    </bean>
    
    <!-- 配置SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:/spring/spring-mybatis.xml"/>
        <!-- <property name="mapperLocations">
            <list>
                表示在包或以下所有目录中，以-mapper.xml结尾所有文件
                <value>classpath:config/**/*-mapper.xml</value>
            </list>
        </property> -->
    </bean>
     
    <!-- 配置mybatis dao注册，所有dao都继承sqlMapper
    annotationClass：当指定了annotationClass的时候，MapperScannerConfigurer将只注册使用了annotationClass注解标记的接口。
    markerInterface：markerInterface是用于指定一个接口的，当指定了markerInterface之后，MapperScannerConfigurer将只注册继承自markerInterface的接口。
          如果上述两个属性都指定了的话，那么MapperScannerConfigurer将取它们的并集，而不是交集。即使用了annotationClass进行标记或者继承自markerInterface
          的接口都将被注册为一个MapperFactoryBean。 
          除了用于缩小注册Mapper接口范围的属性之外，我们还可以指定一些其他属性，如：
    sqlSessionFactory：这个属性已经废弃。当我们使用了多个数据源的时候我们就需要通过sqlSessionFactory来指定在注册MapperFactoryBean的时候需要使用的SqlSessionFactory，
        因为在没有指定sqlSessionFactory的时候，会以Autowired的方式自动注入一个。换言之当我们只使用一个数据源的时候，即只定义了一个SqlSessionFactory的时候我们就可以不给
        MapperScannerConfigurer指定SqlSessionFactory。
    sqlSessionFactoryBeanName：它的功能跟sqlSessionFactory是一样的，只是它指定的是定义好的SqlSessionFactory对应的bean名称。
    sqlSessionTemplate：这个属性已经废弃。它的功能也是相当于sqlSessionFactory的，因为就像前面说的那样，MapperFactoryBean最终还是使用的SqlSession的getMapper
    方法取的对应的Mapper对象。当定义有多个SqlSessionTemplate的时候才需要指定它。对于一个MapperFactoryBean来说SqlSessionFactory和SqlSessionTemplate只需要其中一个就可以了，
    当两者都指定了的时候，SqlSessionFactory会被忽略。
    sqlSessionTemplateBeanName：指定需要使用的sqlSessionTemplate对应的bean名称。-->
    <!-- 创建数据映射器,映射器必须是接口 -->
    <!-- 指定映射器接口，以及sqlsessionFactory -->
    <bean  class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage">
	         <value>com.qinrenzaixian.web.mapper</value>
	    </property>
    </bean>
    
    <!-- 业务实例，指定映射器-->
    <bean id="qinrenServiceImp"  class="com.qinrenzaixian.web.service.impl.QinrenServiceImpl">
        <!-- <property name="qinrenMapper"  ref="qinrenMapper"/> -->
    </bean>
</beans>